1. Requirements Specification: We are to use a nested loop structure to find all flunky numbers between 1 and 10,000. Our output must include all flunky numbers, the total program running time, and the total number of (inner) loops.

2. System analysis: In order to determine whether each number N from 1 - 10,000 is flunky, we will first need to be able to find all factors of the number N. This could be done by checking that N % i == 0, where i ranges from 1 to N; however, we note that with only one exception, all factors of N occur between 1 and N//3. The exception is for even numbers, where N//2 is a factor. We are also given that precisely 7 flunky numbers exist between 1 and 10,000, so we intend to stop our program once 7 are found.

3. System design: We will begin by defining a (probably crude) procedure in order to find the factors of an integer N. When factors are found, we will append the factor to a list. Next, we will write the nested loop structure which identifies the flunky numbers. For each number N between 1 and 10,000, we will factor the integer, and from the factors, we will define a sequence of numbers which are randomly generated using the factor as the seed: this will be done in a nested loop structure. From the randomly generated list, it will be determined whether or not the integer N is flunky. After the modules are imported, we will get the current time, and after the nested loop procedure, we will get another timestamp: the difference between these times will serve as the total computation time. We will then print our results.

4. Testing: We will ensure that our program returns the 3 flunky numbers given.